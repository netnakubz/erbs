"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StickyHeaderScrollView = void 0;
const react_1 = __importStar(require("react"));
const react_native_1 = require("react-native");
const react_native_status_bar_height_1 = require("react-native-status-bar-height");
const StickyHeader_1 = require("./StickyHeader");
const TopHeader_1 = require("./TopHeader");
function StickyHeaderScrollView({ children, top, bottom, headerBackground = '#ffffff', scrollViewBackground = '#ffffff', refreshing = false, onRefresh, }) {
    const [topHeight, setTopHeight] = (0, react_1.useState)(0);
    const [bottomHeight, setBottomHeight] = (0, react_1.useState)(0);
    const headerComponentRef = (0, react_1.useRef)(null);
    const topComponentRef = (0, react_1.useRef)(null);
    const bottomComponentRef = (0, react_1.useRef)(null);
    const scrollViewRef = (0, react_1.useRef)(new react_native_1.Animated.Value(0));
    const scrollY = (0, react_1.useRef)(new react_native_1.Animated.Value(0)).current;
    const translateYRef = (0, react_1.useRef)(new react_native_1.Animated.Value(0));
    const opacityRef = (0, react_1.useRef)(new react_native_1.Animated.Value(0));
    const [statusBarHeight] = (0, react_1.useState)((0, react_native_status_bar_height_1.getStatusBarHeight)());
    const [headerHeight, setHeaderHeight] = (0, react_1.useState)(topHeight + bottomHeight + statusBarHeight);
    const [paddingTop, setPaddingTop] = (0, react_1.useState)(0);
    const lastTimeOffsetRef = (0, react_1.useRef)(0);
    const animatingRef = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        const newHeaderHeight = react_native_1.Platform.OS === 'android'
            ? topHeight + bottomHeight + statusBarHeight
            : topHeight + bottomHeight;
        const paddingTop = react_native_1.Platform.OS === 'android'
            ? topHeight !== bottomHeight
                ? newHeaderHeight + Math.abs(topHeight - bottomHeight)
                : newHeaderHeight
            : 0;
        setHeaderHeight(newHeaderHeight);
        setPaddingTop(paddingTop);
    }, [topHeight, headerHeight, scrollViewRef]);
    (0, react_1.useEffect)(() => {
        scrollY.addListener(event => {
            if (animatingRef.current) {
                return;
            }
            if (event.value <= 0 ||
                (event.value <= lastTimeOffsetRef.current && event.value < react_native_1.Dimensions.get('screen').height)) {
                // 点灯
                react_native_1.Animated.parallel([
                    react_native_1.Animated.timing(translateYRef.current, {
                        toValue: 0,
                        duration: 160,
                        useNativeDriver: true,
                    }),
                    react_native_1.Animated.timing(opacityRef.current, {
                        toValue: 1,
                        duration: 160,
                        useNativeDriver: true,
                    }),
                ]).start(({ finished }) => {
                    animatingRef.current = !finished;
                });
            }
            else {
                // 消灯
                react_native_1.Animated.parallel([
                    react_native_1.Animated.timing(translateYRef.current, {
                        toValue: -topHeight,
                        duration: 160,
                        useNativeDriver: true,
                    }),
                    react_native_1.Animated.timing(opacityRef.current, {
                        toValue: 0,
                        duration: 160,
                        useNativeDriver: true,
                    }),
                ]).start(({ finished }) => {
                    animatingRef.current = !finished;
                });
            }
            lastTimeOffsetRef.current = event.value;
        });
        return () => {
            scrollY.removeAllListeners();
        };
    }, [topHeight, headerHeight, headerComponentRef]);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(react_native_1.SafeAreaView, { style: {
                flex: 1,
                backgroundColor: scrollViewBackground,
            } },
            react_1.default.createElement(react_native_1.Animated.ScrollView, { ref: scrollViewRef, refreshControl: onRefresh ? (react_1.default.createElement(react_native_1.RefreshControl, { progressViewOffset: headerHeight, refreshing: refreshing, onRefresh: onRefresh })) : undefined, onScroll: react_native_1.Animated.event([
                    {
                        nativeEvent: {
                            contentOffset: { y: scrollY },
                        },
                    },
                ], { useNativeDriver: true }), scrollEventThrottle: 16, contentInset: {
                    top: react_native_1.Platform.OS === 'ios'
                        ? topHeight !== bottomHeight
                            ? headerHeight + Math.abs(topHeight - bottomHeight)
                            : headerHeight
                        : 0,
                }, contentOffset: {
                    x: 0,
                    y: react_native_1.Platform.OS === 'ios'
                        ? topHeight !== bottomHeight
                            ? -(headerHeight + Math.abs(topHeight - bottomHeight))
                            : -headerHeight
                        : 0,
                }, contentContainerStyle: {
                    paddingTop,
                }, automaticallyAdjustContentInsets: false, contentInsetAdjustmentBehavior: "automatic", showsVerticalScrollIndicator: false, showsHorizontalScrollIndicator: false },
                react_1.default.createElement(react_native_1.Animated.View, { style: {
                        backgroundColor: 'transparent',
                    } }, children))),
        react_1.default.createElement(react_native_1.Animated.View, { style: [
                {
                    position: 'absolute',
                    top: 0,
                    width: react_native_1.Dimensions.get('screen').width,
                    height: topHeight,
                    backgroundColor: headerBackground,
                    transform: [
                        {
                            translateY: translateYRef.current,
                        },
                    ],
                },
            ] }),
        react_1.default.createElement(react_native_1.Animated.View, { ref: headerComponentRef, style: [
                {
                    position: 'absolute',
                    top: statusBarHeight,
                    width: react_native_1.Dimensions.get('screen').width,
                    backgroundColor: headerBackground,
                    transform: [
                        {
                            translateY: translateYRef.current,
                        },
                    ],
                },
            ] },
            react_1.default.createElement(TopHeader_1.TopHeader, { opacity: opacityRef.current, onLayout: event => {
                    const height = event.nativeEvent.layout.height;
                    setTopHeight(height);
                } },
                react_1.default.createElement(react_native_1.View, null, top(topComponentRef))),
            react_1.default.createElement(StickyHeader_1.StickyHeader, { onLayout: event => {
                    const height = event.nativeEvent.layout.height;
                    setBottomHeight(height);
                } }, bottom(bottomComponentRef))),
        react_1.default.createElement(react_native_1.StatusBar, { translucent: true })));
}
exports.StickyHeaderScrollView = StickyHeaderScrollView;
